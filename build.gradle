import org.w3c.dom.Element

buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1.+', changing: true
    }
}

repositories {
    maven {
        name 'LDTTeam - Modding'
        url 'https://ldtteam.jfrog.io/ldtteam/modding/'
    }
    maven {
        url "https://maven.tehnut.info"
    }
    maven {
        url "https://www.cursemaven.com"
    }
    maven {
        url "http://harleyoconnor.com/maven"
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven-publish'

ext.configFile = file "gradle.properties"
configFile.withReader {
    def prop = new Properties()
    prop.load(it)
    ext.config = new ConfigSlurper().parse prop
}

version = "${config.mc_version}-${config.mod_version}"
group = config.package_group
archivesBaseName = config.mod_name

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

minecraft {
    mappings channel: 'official', version: config.mc_version

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            // For Serene Seasons as it uses Mixins.
            properties 'mixin.env.disableRefMap' : 'true'

            mods {
                dynamictrees {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            mods {
                dynamictrees {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'dynamictrees', '--all', '--output', file('src/generated/resources/')

            mods {
                dynamictrees {
                    source sourceSets.main
                }
            }
        }
    }
}

dependencies {
    // Not sure if we need this one, what is a "forge" anyway?
    minecraft "net.minecraftforge:forge:${config.mc_version}-${config.forge_version}"

    // Compile Hwyla API, but don't include in runtime.
    compileOnly fg.deobf("mcp.mobius.waila:Hwyla:${config.hwyla_version}:api")
    // At runtime, use the full Hwyla mod.
    runtimeOnly fg.deobf("mcp.mobius.waila:Hwyla:${config.hwyla_version}")

    // Compile JEI API, but don't include in runtime.
    compileOnly fg.deobf("mezz.jei:jei-${config.mc_version}:${config.jei_version}:api")
    // At runtime, use the full JEI mod.
    runtimeOnly fg.deobf("mezz.jei:jei-${config.mc_version}:${config.jei_version}")

    // At runtime, use Patchouli mod (for the guide book, which is Json so we don't need the API).
//    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${config.patchouli_version}")

    //At runtime use ComputerCraft for creating the growth chambers
    runtimeOnly fg.deobf("curse.maven:cc-tweaked-282001:3236650")

    // Compile full Serene Seasons mod and use in runtime.
    implementation fg.deobf("curse.maven:SereneSeasons-291874:3202233")

    // At runtime, use suggestion provider fix mod.
    runtimeOnly fg.deobf("com.harleyoconnor.suggestionproviderfix:SuggestionProviderFix:${config.mc_version}-${config.suggestion_provider_fix_version}")
}

jar {
    manifest {
        attributes([
                "Specification-Title": project.name,
                "Specification-Vendor": "ferreusveritas",
                "Specification-Version": "1",
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor" :"ferreusveritas",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

task sourcesJar(type: Jar) {
    archiveClassifier.set("sources")
    from sourceSets.main.allJava
}

jar.finalizedBy('reobfJar')

java {
    withSourcesJar()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            setArtifactId("${config.mod_name}-${config.mc_version}")
            setVersion(config.mod_version)

            from components.java

            pom {
                url = "https://github.com/ferreusveritas/${config.mod_name}"
                licenses {
                    license {
                        name = 'MIT'
                        url = 'https://mit-license.org'
                    }
                }
                scm {
                    connection = "scm:git:git://github.com/ferreusveritas/${config.mod_name}.git"
                    developerConnection = "scm:git:ssh://github.com/ferreusveritas/${config.mod_name}.git"
                    url = "https://github.com/ferreusveritas/${config.mod_name}"
                }
            }

            pom.withXml { xmlProvider ->
                final Element element = xmlProvider.asElement();

                // Clear dependencies.
                element.getChildNodes().each { node ->
                    if (node.getNodeName() == "dependencies")
                        element.removeChild(node)
                }
            }
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

idea {
    module {
        downloadSources = true
    }
}